#!/bin/bash

addsub() {

  if file -i "$1" | grep -q video; then
    video="$1"
  elif file -i "$2" | grep -q video; then
    video="$2"
  else
    echo 'No video found'
    return
  fi

  if [[ "$1" =~ ".srt" ]]; then
    subtitles="$1"
  elif [[ "$2" =~ ".srt" ]]; then
    subtitles="$2"
  else
    echo 'No subtitles found'
    return
  fi

  ffmpeg -i "$video" -i "$subtitles" -c copy -c:s mov_text -sub_charenc UTF-8 "${video:0:-4}-subs.mp4"

}

rec() {

  mkdir -p ~/Videos/ ~/Videos/Recorded

  resolution=(2540 1080)
  preset='-preset ultrafast'
  format='-pix_fmt yuv420p'
  fps='-framerate 30'
  lib='-c:v libx264'
  crf='-crf 30'
  gq='-qp 20'

  for ((i=0; i < ${#1}; i++)); do
    case "${1:$i:1}" in
      l) resolution=(1280 540); crf='-crf 35'; gq='-qp 10'; fps='-framerate 20'; echo low;;
      n) resolution=(2540 1080); crf='-crf 30'; gq='-qp 10'; fps='-framerate 30'; echo normal;;
      h) resolution=(3440 1440); crf='-crf 22'; gq='-qp 10'; fps='-framerate 60'; echo high;;
      s) preset='-preset slow'; echo slow;;
      e) echo efficient mode
         if [[ ! "$1" =~ 'g' ]]; then
           lib='-c:v libx265'
         fi;;
      g) if [[ "$1" =~ 'e' ]]; then
           lib='-codec:v hevc_vaapi'
         else
           lib='-codec:v h264_vaapi'
         fi
         lib+=" -vf 'scale=${resolution[0]}x${resolution[1]},hwdownload,format=nv12' -f mpegts"
#         lib+=" -vf 'deinterlace_vaapi=rate=field:auto=1,scale_vaapi=w=640:h=360,hwdownload,format=nv12' -f mpegts"
         device='-hwaccel vaapi -hwaccel_device /dev/dri/renderD128 -hwaccel_output_format vaapi'
         echo 'enabled gpu acceleration';;
      *) echo
         echo 'Usage : rec <l/n/h + s? + e? + g?>'
         echo
         echo 'QUALITY : l=low / n=normal / h=high (default : normal)'
         echo 'ENCODING : e=efficient (default : compatibility)'
         echo 'ENCODING : g=enable gpu (default : CPU)'
         echo 'PRESET : s=slow (default : fast)'
         echo
         return;;
    esac
  done

  if [[ "$1" =~ 'g' ]]; then
    unset crf format preset resolution
  else
    resolution="-vf scale=${resolution[0]}:${resolution[1]}"
    unset gq device
  fi

  ffmpeg -hide_banner -stats -loglevel warning $device -f x11grab $fps -i :0 $resolution $lib $crf $gq $preset $format -y ~/Videos/Recorded/$(date +%y-%m-%d-%H:%M:%S).mp4
  echo "ffmpeg -hide_banner -stats -loglevel warning $device -f x11grab $fps -i :0 $resolution $lib $crf $gq $preset $format -y ~/Videos/Recorded/$(date +%y-%m-%d-%H:%M:%S).mp4"

}

# mkdir -p converted && readarray -t names <<< $(find -type f) && for ((i=0; i<${#names[@]}; i++)); do mv ${names[i]}-temp ffmpeg -i ${names[i]}-temp -q:v 5 -vf 'scale=if(gte(iw\,ih)\,min(2000\,iw)\,-2):if(lt(iw\,ih)\,min(2000\,ih)\,-2)' converted/$i.jpg; echo ${names[i]}; done

compress() {

  echo
  args=($@)
  resolution=2000
  imageQuality=4
  videoQuality=30
  path=.
  unset marker destination overwrite
  for ((i=0; i < "${#args[@]}"; i++)); do
    if [[ "${args[i]}${args[i+1]}" =~ '--resolution'[0-9]+|'-R'[0-9]+ ]]; then
      resolution="${args[i+1]}"
    elif [[ "${args[i]}${args[i+1]}" =~ '--image-quality'[0-9]+|'-IQ'[0-9]+ ]]; then
      imageQuality="${args[i+1]}"
      if (("$imageQuality" > 31)); then
        echo "Max image quality is 31. Using this value."
        imageQuality=31
      elif (("$imageQuality" < 2)); then
        echo "Min image quality is 2. Using this value."
        imageQuality=2
      fi
    elif [[ "${args[i]}${args[i+1]}" =~ '--video-quality'[0-9]+|'-VQ'[0-9]+ ]]; then
      videoQuality="${args[i+1]}"
      if (("$videoQuality" > 63)); then
        echo "Max video quality is 63. Using this value."
        videoQuality=63
      fi
    elif [[ "${args[i]}${args[i+1]}" =~ '--path'.+|'-P'.+ ]]; then
      path="${args[i+1]}"
      if [[ ! -d "$path" ]]; then
        echo -e "\e[31mERROR : Path does not exist.\e[0m\n"
        return
      fi
    elif [[ "${args[i]}${args[i+1]}" =~ '--destination'.+|'-D'.+ ]]; then
      destination="${args[i+1]}"
      if [[ "${destination: -1}" != '/' ]]; then
        destination="$destination/"
      fi
      if [[ ! -d "$destination" ]]; then
        echo -e '\e[33mWARNING : Destination does not exist.\e[0m'
        read -p "Do you want to create it ? > " answer
        if [[ "$answer" == 'y' ]]; then
          mkdir -p "$destination"
          echo
        else
          echo
          echo 'Abording...'
          echo
          return
        fi
      fi
    elif [[ "${args[i]}${args[i+1]}" =~ '--overwrite'.+|'-O'.+ ]]; then
      if [[ "${args[i+1]}" == 'y' ]]; then
        overwrite="-y"
      elif [[ "${args[i+1]}" == 'n' ]]; then
        overwrite="-n"
      fi
    elif [[ "${args[i]}" =~ '-help'|'-H' ]]; then
      echo "USAGE : compress <parameters>"
      echo
      echo 'Parameters :'
      echo '  --help (-H) : display this help message'
      echo '  --overwrite (-O) : overwrite files (y/n)'
      echo '  --path (-P) : select input directory'
      echo '  --destination (-D) : select output directory'
      echo '  --image-quality (-IQ) : specify jpg quality (2-31)'
      echo '  --video-quality (-VQ) : specify h264 quality (0-63)'
      echo '  --resolution (-R) : downscale results'
      echo
      return
    fi
  done
  echo "R: $resolution - IQ: $imageQuality - VQ : $videoQuality - P: $path - D: $destination"
  echo
  trap 'return' 2 3
  readarray -t files <<< $(find "$path" -type f | grep -v 'ffmpeg')
  if [[ -z "$destination" ]]; then
    marker="-ffmpeg"
  fi
  for ((i=0; i < "${#files[@]}"; i++)); do
    outputName="${files[i]%.*}"
    if [[ "${outputName:0:2}" == './' ]]; then
      outputName="${outputName:2}"
    fi
    if [[ -n $(file -i "${files[i]}" | grep image) ]]; then
      ffmpeg -loglevel error $overwrite -i "${files[i]}" \
      -q:v "$imageQuality" -preset placebo \
      -vf 'scale=if(gte(iw\,ih)\,min('"$resolution"'\,iw)\,-2):if(lt(iw\,ih)\,min('"$resolution"'\,ih)\,-2)' \
      "$destination${outputName##*/}$marker.jpg"
    elif [[ -n $(file -i "${files[i]}" | grep video) ]]; then
      ffmpeg -loglevel error -stats $overwrite -i "${files[i]}" \
      -crf "$videoQuality" -preset slow -c:v libx264 -c:a aac -b:a 96k \
      -vf 'scale=if(gte(iw\,ih)\,min('"$resolution"'\,iw)\,-2):if(lt(iw\,ih)\,min('"$resolution"'\,ih)\,-2)' \
      "$destination${outputName##*/}$marker.mp4"
    fi
    echo -ne "\r$i/${#files[@]} "
  done
  echo -ne '\e[2K\r\e[32mDone\e[0m\n\n'

}
