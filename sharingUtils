#!/bin/bash


# file uploader

up() {

  # init
  unset file link
  trap 'unset file link; return' 2 3
  if [[ "$1" =~ [a|g|G] ]]; then
    choice="$1"
  elif [[ "$2" =~ [a|g|G] ]]; then
    choice="$2"
  else
    echo
    echo -e '\e[35m# uploader\e[0m'
    echo
    echo -e '\e[32m[g] - gofile public'
    echo '[G] - gofile private'
    echo '[a] - anonfiles'
    echo
    echo -e '\e[33m[s] - shorten result'
    echo -e '\e[31m[e] - exit\e[0m'
    echo
    read -p 'option : ' choice
    if [[ "$choice" == 'e' ]]; then
      echo
      return
    fi
  fi

  # file selection
  if [[ -f "$1" ]]; then
    file="$1"
  elif [[ -f "$2" ]]; then
    file="$2"
  else
    read -p 'file : ' file
    if [[ ! -s "$file" ]]; then
      echo -e '\e[31mInvalid file\e[0m\n'
      return
    fi
  fi
  echo

  # worker
  for ((i=0; i < "${#choice}"; i++)); do
    case "${choice:i:1}" in
      g) serv=$(curl -s 'https://api.gofile.io/getServer' | jq -r .data.server)
         link=$(curl -# -F token="$GOFILE_API_KEY" -F folderId="$GOFILE_PUBLIC_FOLDER_ID" -F "file=@$file" "https://$serv.gofile.io/uploadFile" | jq -r .data.downloadPage);;
      G) serv=$(curl -s 'https://api.gofile.io/getServer' | jq -r .data.server)
         link=$(curl -# -F token="$GOFILE_API_KEY" -F folderId="$GOFILE_PRIVATE_FOLDER_ID" -F "file=@$file" "https://$serv.gofile.io/uploadFile" | jq -r .data.downloadPage);;
      a) link=$(curl -# -F "file=@$file" "https://api.anonfiles.com/upload?token=$ANONFILES_API_KEY" | jq -r .data.file.url.full);;
      s) if [[ -n "$link" ]]; then
           sgo "$link"
           unset link
         else
           echo -e "\e[31mFail\e[0m\n"
           return
         fi;;
      e) echo; return;;
    esac
    if [[ ! "${choice:i+1:1}" == 's' && -n "$link" ]]; then
      echo -e "\n\e[32m$link\e[0m\n"
    fi
  done
  unset file link

}

# url shorteners

1o2() {

  if [[ -n "$1" ]]; then
    if [[ ! "$1" =~ ^'http' ]]; then
      url=$(echo 'https://'"$1")
    else
      url="$1"
    fi
    link=$(curl -s 'https://1o2.ir/magic.php' -d '{"url":"'"$url"'","name":"'"$2"'"}' | jq -r .short)
    if [[ -n "$link" ]]; then
      echo "1o2.ir/$link"
      unset "$link"
    fi
  else
    echo "Usage : 1o2 <url> <name> (optionnal)"
  fi


}

sgo() {

  url="$1"
  if [[ -z "$url" ]]; then read -p "url : " url; fi
  if [[ ! "$url" =~ ^https?\:\/\/ ]]; then url="https://$url"; fi
  request=$(curl -s 'https://api.go.ly/api/v1/link/public' \
  -H 'content-type: application/json' \
  -d '{"UserID":'"$GOLY_USER_ID"',"Type":0,"DomainID":2,"Payload":{"Destination":"'"$url"'"}}')
  link="go.ly/$(jq -r .Slug <<< $request)"
  echo -e "\n> \e[34m$link\e[0m - \e[32m$url\e[0m\n"

}

lgo() {

  unset shortLinks longLinks
  links=$(curl -s 'https://api.go.ly/api/v1/links?UserID='"$GOLY_USER_ID"'')
  readarray -t shortLinks <<< "$(jq -r .Links[].Slug <<< "$links")"
  readarray -t longLinks <<< "$(jq -r .Links[].Payload <<< "$links" | jq -r .Destination)"
  if [[ -z "$shortLinks" ]]; then
    echo No links found.
    return
  fi
  echo
  for ((i=0; i < "${#shortLinks[@]}"; i++)); do
    echo -e "$(($i+1)) - \e[32mgo.ly/${shortLinks[i]}\e[0m - \e[34m${longLinks[i]}\e[0m"
  done
  echo

}
